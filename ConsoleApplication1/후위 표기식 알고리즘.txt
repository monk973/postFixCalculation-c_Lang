[후위표기식 알고리즘]

중위 표기식을 후위 표기식으로 직접 손으로 변환해보면서 풀이 과정을 정리했습니다.

먼저, 중위 표기식 문자열에서 한 문자씩 읽어나가는데 연산자와 피연산자를 나눌 필요가 있었습니다.

연산자는 연산자스택을 따로 만들어서 저장해놔야했고, 피연산자는 별도로 만든 출력용 문자열에 출력해나갔습니다.

한 문자씩 읽어나가면서 피연산자(숫자)를 만났다면 바로 출력용 문자열에 출력했고, 연산자를 만났을땐 연산자 스택의 최상위에있는 연산자와 우선순위를 비교합니다.

스택의 최상위에있는 연산자가 읽어들인 연산자보다 우선순위가 높다면 연산자 스택의 내용물을 전부 출력용 문자열에 출력합니다.

PLUS =1 , MINUS =1,
MUL =2 , DIV =2,
LEFT_BRACKET(왼쪽 소괄호) = 3

이렇게 우선순위를 정해뒀습니다.

즉, 스택의 최상위에있는 연산자가 곱하기이고 읽어들인 문자가 더하기일 경우, 연산자 스택에있는 모든 내용물이 문자열에 출력되야합니다. 단, 왼쪽 소괄호를 만나기전까지 출력해야합니다. 

왼쪽 소괄호가 사라지는 조건은 읽어들인 문자가 오른쪽 괄호일때 뿐입니다. 오른쪽 괄호를 만날경우 연산자 스택에 쌓인 모든 연산자들이 출력용 문자열에 출력됩니다. 물론, 왼쪽 소괄호를 만날때까지 출력합니다.
출력해나가면서 연산자 스택의 최상위 연산자가 왼쪽 소괄호라면 왼쪽 소괄호를 pop해서 삭제하고 출력 루프를 중지합니다.

연산자, 피연산자, 괄호에 대한 처리까지 알고리즘을 정리해두니 프로그래밍하기 쉬워졌습니다.

마지막으로 검토를 할때는 직접 변수에 특정 식을 입력하게하고 나온 결과값과 제가 만든 함수를 실행시켜서 나온 결과값을 비교해보면서 검토했습니다. 

직접 변수에 특정 식을 입력해서 나온 값은 컴파일러가 계산한것이기때문에 정확할것입니다.

여기까지 알고리즘 검토까지 마쳤습니다.













